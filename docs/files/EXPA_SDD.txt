scope_list = ScopeStack()
arithm_expressions: List[Tuple[Node, int]] = []
getTypeOfVariable(ident, lineno)
arithm_expressions_as_json()
addNewScopeToList(is_loop: bool)
checkIfIsValid(left, right, operation, lineno)



production:
    new_loop_scope : &
rules:
    addNewScopeToList(is_loop=True)


productions:
    PROGRAM : addNewScopeToList STATEMENT
    PROGRAM : addNewScopeToList FUNCLIST
    PROGRAM : &
rules:
    global_scope = scope_list.pop()

    PROGRAM.scopes = global_scope.as_json()
    PROGRAM.arithm_expressions = arithm_expressions_as_json()

production:
    FUNCDEF : DEF IDENT addNewScopeToList LPARENTHESES PARAMLIST RPARENTHESES LEFTBRACE STATELIST RIGHTBRACE
rules:
    scope_list.pop()

    scope = scope_list.seek()
    entry = TableEntry(IDENT, 'function', [], lineno(IDENT))
    scope.add_entry(entry)

productions:
    PARAMLIST : TYPE IDENT PARAMLISTAUX
rules:
    scope = scope_list.seek()
    entry = TableEntry(IDENT, TYPE, [], lineno(IDENT))
    scope.add_entry(entry)

production:
    TYPE : INT_KEYWORD
rules:
    TYPE.sin = 'int'

production:
    TYPE : FLOAT_KEYWORD
rules:
    TYPE.sin = 'float'

production:
    TYPE : STRING_KEYWORD
rules:
    TYPE.sin = 'string'


production:
    STATEMENT : addNewScopeToList LEFTBRACE STATELIST RIGHTBRACE
rules:
    scope_list.pop()

production:
    STATEMENT : BREAK SEMICOLON
rules:
    current_scope = scope_list.seek()

    while True:
        if current_scope.is_loop:
            break

        current_scope = current_scope.upper_scope

        if current_scope is None:
            raise BreakWithoutLoopError(lineno(SEMICOLON))


production:
    VARDECL : TYPE IDENT ARRAY_OPT
rules:
    entry = TableEntry(IDENT, TYPE, ARRAY_OPT, lineno(IDENT))
    scope = scope_list.seek()
    scope.add_entry(entry)


production:
    ARRAY_OPT : LBRACKET INTCONSTANT RBRACKET ARRAY_OPT1
rules:
    ARRAY_OPT.sin = [INTCONSTANT.sin, *ARRAY_OPT1.sin]


production:
    ARRAY_OPT : &
rules:
    ARRAY_OPT.sin = []

production
    EXPR_OR_FCALL : PLUS FACTOR OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    right_node = FACTOR.node

    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(OPT_UNARY_TERM.node,
                                 right_node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(PLUS))

        right_node = Node(OPT_UNARY_TERM.node,
                          right_node,
                          OPT_UNARY_TERM.operation,
                          result_type)

    if OPT_ARITHM.node:
        result_type = checkIfIsValid(OPT_ARITHM.node,
                                 right_node,
                                 OPT_ARITHM.operation,
                                 lineno(PLUS))
        right_node = Node(OPT_ARITHM.node,
                          right_node,
                          OPT_ARITHM.operation,
                          result_type)

    arithm_expressions.append(right_node)

productions:
    EXPR_OR_FCALL : MINUS FACTOR OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    right_node = FACTOR.node
    right_node.value *= -1

    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(OPT_UNARY_TERM.node,
                                 right_node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(PLUS))

        right_node = Node(OPT_UNARY_TERM.node,
                          right_node,
                          OPT_UNARY_TERM.operation,
                          result_type)

    if OPT_ARITHM.node:
        result_type = checkIfIsValid(OPT_ARITHM.node,
                                 right_node,
                                 OPT_ARITHM.operation,
                                 lineno(PLUS))
        right_node = Node(OPT_ARITHM.node,
                          right_node,
                          OPT_ARITHM.operation,
                          result_type)

    arithm_expressions.append(right_node)


production:
    EXPR_OR_FCALL : INTCONSTANT OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    node = Node(None, None, INTCONSTANT.sin, 'int')

    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(node,
                                 OPT_UNARY_TERM.node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(OPT_UNARY_TERM))
        node = Node(node, OPT_UNARY_TERM.node, OPT_UNARY_TERM.operation, result_type)

    if OPT_ARITHM.node:
        result_type = checkIfIsValid(node,
                                 OPT_ARITHM.node,
                                 OPT_ARITHM.operation,
                                 lineno(OPT_ARITHM))
        node = Node(node, OPT_ARITHM.node, OPT_ARITHM.operation, result_type)

    EXPR_OR_FCALL.node = node

    arithm_expressions.append((node, lineno(OPT_ARITHM)))


production:
    EXPR_OR_FCALL : FLOATCONSTANT OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    node = Node(None, None, FLOATCONSTANT.sin, 'float')

    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(node,
                                 OPT_UNARY_TERM.node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(OPT_UNARY_TERM))
        node = Node(node, OPT_UNARY_TERM.node, OPT_UNARY_TERM.operation, result_type)

    if OPT_ARITHM.node:
        result_type = checkIfIsValid(node,
                                 OPT_ARITHM.node,
                                 OPT_ARITHM.operation,
                                 lineno(OPT_ARITHM))
        node = Node(node, OPT_ARITHM.node, OPT_ARITHM.operation, result_type)

    EXPR_OR_FCALL.node = node

    arithm_expressions.append((node, lineno(OPT_ARITHM)))


production:
    EXPR_OR_FCALL : STRINGCONSTANT OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    node = Node(None, None, STRINGCONSTANT.sin, 'string')

    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(node,
                                 OPT_UNARY_TERM.node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(OPT_UNARY_TERM))
        node = Node(node, OPT_UNARY_TERM.node, OPT_UNARY_TERM.operation, result_type)

    if OPT_ARITHM.node:
        result_type = checkIfIsValid(node,
                                 OPT_ARITHM.node,
                                 OPT_ARITHM.operation,
                                 lineno(OPT_ARITHM))
        node = Node(node, OPT_ARITHM.node, OPT_ARITHM.operation, result_type)

    EXPR_OR_FCALL.node = node

    arithm_expressions.append((node, lineno(OPT_ARITHM)))


production:
    EXPR_OR_FCALL : LPARENTHESES NUMEXPRESSION RPARENTHESES OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    node = NUMEXPRESSION.node

    if OPT_UNARY_TERM:
        result_type = checkIfIsValid(node,
                                 OPT_UNARY_TERM.node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(LPARENTHESES))
        node = Node(node, OPT_UNARY_TERM.node, OPT_UNARY_TERM.operation, result_type)

    if OPT_ARITHM:
        result_type = checkIfIsValid(node,
                                 OPT_ARITHM.node,
                                 OPT_ARITHM.operation,
                                 lineno(LPARENTHESES))
        node = Node(node, OPT_ARITHM.node, OPT_ARITHM.operation, result_type)

    EXPR_OR_FCALL.node = node

    arithm_expressions.append((node, lineno(LPARENTHESES)))


production:
    EXPR_OR_FCALL : IDENT AFTER_IDENT
rules:
    node = Node(None, None, IDENT, getTypeOfVariable(IDENT, lineno(IDENT)))

    if AFTER_IDENT:
        node.value += AFTER_IDENT.vec_access
        result_type = checkIfIsValid(node,
                                 AFTER_IDENT.node,
                                 AFTER_IDENT.operation,
                                 lineno(IDENT))
        node = Node(node, AFTER_IDENT.node, AFTER_IDENT.operation, result_type)

        arithm_expressions.append((node, lineno(IDENT)))


production:
    AFTER_IDENT : OPT_ALLOC_EXPR OPT_UNARY_TERM OPT_ARITHM OPT_CMP_EXPR
rules:
    node = None
    operation = ''

    if OPT_UNARY_TERM:
        node = OPT_UNARY_TERM.node
        operation = OPT_UNARY_TERM.operation

    if OPT_ARITHM:
        if node is None:
            node = OPT_ARITHM.node
            operation = OPT_ARITHM.operation

        else:
            result_type = checkIfIsValid(node,
                                     OPT_ARITHM.node,
                                     OPT_ARITHM.operation,
                                     lineno(AFTER_IDENT))
            node = Node(node, OPT_ARITHM.node, OPT_ARITHM.operation, result_type)

    AFTER_IDENT.vec_access = OPT_ALLOC_EXPR.sin
    AFTER_IDENT.node = node
    AFTER_IDENT.operation = operation


production:
    IFSTAT : IF LPARENTHESES EXPRESSION RPARENTHESES addNewScopeToList LEFTBRACE STATELIST RIGHTBRACE ELSESTAT
rules:
    scope_list.pop()


production:
    ELSESTAT : ELSE addNewScopeToList LEFTBRACE STATELIST RIGHTBRACE
rules:
    scope_list.pop()


production:
    FORSTAT : FOR LPARENTHESES ATRIBSTAT SEMICOLON EXPRESSION SEMICOLON ATRIBSTAT RPARENTHESES new_loop_scope LEFTBRACE STATELIST RIGHTBRACE
rules:
    scope_list.pop()


producttion:
    ALLOCEXPRESSION : NEW TYPE LBRACKET NUMEXPRESSION RBRACKET OPT_ALLOC_EXPR
rules:
    arithm_expressions.append((NUMEXPRESSION.node, lineno(NEW)))


production:
    OPT_ALLOC_EXPR : &
rules:
    OPT_ALLOC_EXPR.sin = ''


production:
    OPT_ALLOC_EXPR : LBRACKET NUMEXPRESSION RBRACKET OPT_ALLOC_NUMEXP1
rules:
    OPT_ALLOC_EXPR.sin = '[' + NUMEXPRESSION.node.id + ']' + OPT_ALLOC_NUMEXP1.sin

    arithm_expressions.append((NUMEXPRESSION.node, lineno(NEW)))


production:
    EXPRESSION : NUMEXPRESSION OPT_CMP_EXPR
rules:
    arithm_expressions.append((NUMEXPRESSION.node, lineno(NUMEXPRESSION)))


production:
    OPT_CMP_EXPR : CMP NUMEXPRESSION
rules:
    arithm_expressions.append((NUMEXPRESSION.node, lineno(CMP)))

production:
    NUMEXPRESSION : TERM OPT_ARITHM
rules:
    if OPT_ARITHM.node:
        NUMEXPRESSION.node = TERM.node

    else:
        result_type = checkIfIsValid(TERM.node,
                                 OPT_ARITHM.node,
                                 OPT_ARITHM.operation,
                                 lineno(TERM))
        NUMEXPRESSION.node = Node(TERM.node,
                                  OPT_ARITHM.node,
                                  OPT_ARITHM.operation,
                                  result_type)


production:
    OPT_ARITHM : ARITHM TERM OPT_ARITHM1
rules:
    if OPT_ARITHM1.node:
        result_type = checkIfIsValid(TERM.node,
                                 OPT_ARITHM1.node,
                                 OPT_ARITHM1.operation,
                                 lineno(ARITHM))

        OPT_ARITHM.node = Node(TERM.node, OPT_ARITHM1.node,
                                        OPT_ARITHM1.operation, result_type),
        OPT_ARITHM.operation = ARITHM.operation

    else:
        OPT_ARITHM.node = TERM.node,
        OPT_ARITHM.operation = ARITHM.operation


production:
    ARITHM : PLUS
rules:
    ARITHM.operation = '+'

production:
    ARITHM : MINUS
rules:
    ARITHM.operation = '-'


production:
    TERM : UNARYEXPR OPT_UNARY_TERM
rules:
    if OPT_UNARY_TERM.node:
        result_type = checkIfIsValid(UNARYEXPR.node,
                                 OPT_UNARY_TERM.node,
                                 OPT_UNARY_TERM.operation,
                                 lineno(UNARYEXPR))

        TERM.node = Node(UNARYEXPR.node, OPT_UNARY_TERM.node, OPT_UNARY_TERM.operation, result_type)
        TERM.operation = OPT_UNARY_TERM.operation

    else:
        TERM.node = UNARYEXPR.node


production:
    OPT_UNARY_TERM : OPT_UNARY TERM
rules:
    OPT_UNARY_TERM.node = TERM.node,
    OPT_UNARY_TERM.operation = OPT_UNARY.operation


production:
    OPT_UNARY : TIMES
rules:
    OPT_UNARY.operation = '*'


production:
    OPT_UNARY : MODULE
rules:
    OPT_UNARY.operation = '%'


production:
    OPT_UNARY : DIVIDE
rules:
    OPT_UNARY.operation = '/'


production:
    UNARYEXPR : ARITHM FACTOR
rules:
    if ARITHM.operation == '-':
        FACTORnode.value *= -1

    UNARYEXPR.node = FACTOR.node


production:
    UNARYEXPR : FACTOR
rules:
    UNARYEXPR.node = FACTOR.node


production:
    FACTOR : INTCONSTANT
rules:
    FACTOR.node = Node(None, None, INTCONSTANT.val, 'int')


production:
    FACTOR : FLOATCONSTANT
rules:
    FACTOR.node = Node(None, None, FLOATCONSTANT.val, 'float')


production:
    FACTOR : STRINGCONSTANT
rules:
    FACTOR.node = Node(None, None, STRINGCONSTANT.val, 'string')


production:
    FACTOR : NULL
rules:
    FACTOR.node = Node(None, None, NULL.val, 'null')


production:
    FACTOR : LVALUE
rules:
    FACTOR.node = LVALUE.node


production:
    FACTOR : LPARENTHESES NUMEXPRESSION RPARENTHESES
rules:
    FACTOR.node = NUMEXPRESSION.node

    arithm_expressions.append((NUMEXPRESSION.node, lineno(LPARENTHESES)))


production:
    LVALUE : IDENT OPT_ALLOC_EXPR
rules:
    LVALUE.node = Node(None, None, IDENT.val + OPT_ALLOC_EXPR.sin,
                     result_type=getTypeOfVariable(IDENT.val, lineno(IDENT)))